function [] = generate_test_model(type)
    if strcmpi(type, 'nmf')
        evalin('base', ['movie_index = Index(17);' ...
                        'user_index = Index(4);' ...
                        'topic_index = Index(10);' ...
                        'X = Tensor( movie_index, user_index );' ...
                        'Z1 = Tensor( topic_index, movie_index);' ...
                        'Z2 = Tensor( topic_index, user_index );' ...
                        'X.data = rand(movie_index.cardinality, user_index.cardinality);' ...
                        'Z1.data = rand( topic_index.cardinality, movie_index.cardinality );' ...
                        'Z2.data = rand( topic_index.cardinality, user_index.cardinality ); ' ...
                        'pre_process();' ...
                        'p = [1];' ...
                        'phi = [1];' ...
                        'factorization_model = {X, {Z1, Z2}};']);

    elseif strcmpi( type, 'tucker3')
        evalin('base', ['i_index = Index(2);' ...
                        'j_index = Index(3);' ...
                        'k_index = Index(4);' ...
                        'p_index = Index(5);' ...
                        'q_index = Index(6);' ...
                        'r_index = Index(7);' ...
                        'X = Tensor( i_index, j_index, k_index );' ...
                        'A = Tensor( i_index, p_index);' ...
                        'B = Tensor( j_index, q_index);' ...
                        'C = Tensor( k_index, r_index);' ...
                        'G = Tensor( p_index, q_index, r_index);' ...
                        'X.data = rand( i_index.cardinality, j_index.cardinality, k_index.cardinality );' ...
                        'A.data = rand( i_index.cardinality, p_index.cardinality );' ...
                        'B.data = rand( j_index.cardinality, q_index.cardinality );' ...
                        'C.data = rand( k_index.cardinality, r_index.cardinality );' ...
                        'G.data = rand( p_index.cardinality, q_index.cardinality, r_index.cardinality );' ...
                        'pre_process();' ...
                        'p = [1];' ...
                        'phi = [1];' ...
                        'factorization_model = {X, {A, B, C, G}};']);

    elseif strcmpi( type, 'tucker3_nmf') % X1(ijk) = A(ip) B(jq) C(kr) G(pqr), X2(ij) = A(ip) Z2(pj)
        evalin('base', ['i_index = Index(2);' ...
                        'j_index = Index(3);' ...
                        'k_index = Index(4);' ...
                        'p_index = Index(5);' ...
                        'q_index = Index(6);' ...
                        'r_index = Index(7);' ...
                        'X1 = Tensor( i_index, j_index, k_index );' ...
                        'A = Tensor( i_index, p_index);' ...
                        'B = Tensor( j_index, q_index);' ...
                        'C = Tensor( k_index, r_index);' ...
                        'G = Tensor( p_index, q_index, r_index);' ...
                        'X2 = Tensor( i_index, j_index );' ...
                        'Z2 = Tensor( p_index, j_index);' ...
                        'X1.data = rand( i_index.cardinality, j_index.cardinality, k_index.cardinality );' ...
                        'A.data = rand( i_index.cardinality, p_index.cardinality );' ...
                        'B.data = rand( j_index.cardinality, q_index.cardinality );' ...
                        'C.data = rand( k_index.cardinality, r_index.cardinality );' ...
                        'G.data = rand( p_index.cardinality, q_index.cardinality, r_index.cardinality );' ...
                        'X2.data = rand( i_index.cardinality, j_index.cardinality  );' ...
                        'Z2.data = rand( p_index.cardinality, j_index.cardinality  );' ...
                        'pre_process();' ...
                        'p = [1 1];' ...
                        'phi = [1 1];' ...
                        'factorization_model = {X1, {A, B, C, G}, X2, {A, Z2}};']);

 else
        error('Unknown factorization model type')
    end
    
end